class DataManipulation {
  constructor(spreadsheetOrUndefined, sheetOrSheetNameString) {
    if (!sheetOrSheetNameString) {
      sheetOrSheetNameString = 'Commands';
    }
    if (typeof sheetOrSheetNameString === 'object' && sheetOrSheetNameString /* not null */) {
      this.sheet = sheetOrUndefined;
      this.spreadsheet = this.sheet.getParent();
    } else if (spreadsheetOrUndefined) {
    } else if (typeof sheetOrSheetNameString === 'string') {
      this.spreadsheet = SpreadsheetApp.getActive();
      this.sheet = this.spreadsheet.getSheetByName(sheetOrSheetNameString);
      if (!this.sheet) {
        this.sheet = this.spreadsheet.getActiveSheet();
      }
    }
  
    this.keys = [
      'FUCKING_RUN_THIS',
      'DID_FUCKING_RUN',
      'FUCKING_OUTPUT',
    ];
    this.numberOfKeys = this.keys.length;
    this.checkInitFirstColumn();
  }

  checkInitFirstColumn() {
    let range = this.sheet.getRange(1, 1, 1, this.numberOfKeys);
  
    // Checks if the first column populated
    const values = range.getValues();
    values.some((firstColumnCell, row) => {
      const firstColumnCellValue = firstColumnCell[0];
      if (this.keys[row] !== firstColumnCellValue) {
        return true;
      }
    });

    range.setValues([this.keys]);
    range.setBackground('#d9d2e9')
    range.setWrapStrategy(SpreadsheetApp.WrapStrategy.CLIP);
    range.setHorizontalAlignment('center');

    range = this.sheet.getRange('B2:B');
    range.insertCheckboxes();
  }

  /** @return undefined | [commandToRun: String, commandLine: String] */
  getCommandsToRun() {
    const commandsToRun = [];
    let hasCommandsToRun = false;

    const commandToRunArray = this.sheet.getRange('A2:A').getValues();
    const commandToRunArrayLength = commandToRunArray.length;
    const didFuckingRunArray = this.sheet.getRange('B2:B').getValues();

    didFuckingRunArray.some((didFuckingRunCell, index) => {
      const didFuckingRun = didFuckingRunCell[0];
      if (!didFuckingRun) {
        const commandToRun = commandToRunArray[index][0];
        const commandLine = index + 1;

        if (commandToRunArrayLength < index || !commandToRun) {
          return true;
        } // else
        commandsToRun.push({commandToRun, commandLine});
        if (!hasCommandsToRun) hasCommandsToRun = true;
      }
    });

    return hasCommandsToRun? commandsToRun: undefined;
  }

  postCommandOutput(commandLine, output) {
    const skipFirstLine = 1;
    const range = this.sheet.getRange(commandLine + skipFirstLine, 1, 1, 3);
    const originalCommandValue = range.getValues()[0][0];
    const markCommandDone = true;

    range.setValues([[originalCommandValue, markCommandDone, output]]);
    prettifyRange(range);
  }
}

function testDataManipulation() {
  const dataManipulation = new DataManipulation();
  const commands = dataManipulation.getCommandsToRun();
  console.log(commands);
  const {commandLine} = commands[0];
  dataManipulation.postCommandOutput(commandLine, 'shit');
}
